<?php

/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\RoutesModule\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Routing\RouterInterface;
use Zikula\RoutesModule\Entity\Base\AbstractRouteEntity as BaseEntity;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the concrete entity class for route entities.
 * @ORM\Entity(repositoryClass="Zikula\RoutesModule\Entity\Repository\RouteRepository")
 * @ORM\Table(name="zikula_routes_route",
 *     indexes={
 *         @ORM\Index(name="workflowstateindex", columns={"workflowState"})
 *     }
 * )
 */
class RouteEntity extends BaseEntity
{
    /**
     * @var RouterInterface
     */
    private $router = null;

    /**
     * When getting options, the `zkNoBundlePrefix` and `i18n` values must
     * be added before returning. These will override any values for same keys
     * set in the `options` array.
     */
    public function getOptions(bool $includeConfiguredOptions = false): array
    {
        $options = $this->options;
        if ($includeConfiguredOptions) {
            // zkNoBundlePrefix value is the _opposite_ of prependBundlePrefix value
            $options['zkNoBundlePrefix'] = !$this->prependBundlePrefix;
            $options['i18n'] = $this->translatable;
        }

        return $options;
    }

    // structure is controlled by Zikula\Bundle\FormExtensionBundle\Form\Type\ControllerType
    public function getRouteController(): array
    {
        $routeController = null;
        $bundle = $this->getBundle();
        $controller = $this->getController();
        $action = $this->getAction();

        if (null !== $this->router) {
            foreach ($this->router->getRouteCollection()->all() as $route => $params) {
                $defaults = $params->getDefaults();
                if (!isset($defaults['_controller']) || empty($defaults['_controller'])) {
                    // skip routes without controller
                    continue;
                }
                if (!isset($defaults['_zkBundle']) || $defaults['_zkBundle'] !== $bundle) {
                    continue;
                }
                if ($defaults['_zkType'] !== $controller) {
                    continue;
                }
                if ($defaults['_zkFunc'] !== $action) {
                    continue;
                }
                $routeController = $route . '###' . ($defaults['_controller'] ?? '');
                break;
            }
        }

        return [
            'controller' => $routeController
        ];
    }

    public function setRouteController(array $input): self
    {
        $input = $input['controller'];

        $controllerParts = explode('###', $input);
        $controllerParts = explode('\\', $controllerParts[1]);
        $bundle = $controllerParts[0] . $controllerParts[1];
        [$controller, $action] = explode('::', $controllerParts[count($controllerParts) - 1]);

        $controller = lcfirst(str_replace('Controller', '', $controller));
        $action = lcfirst($action);

        $this
            ->setBundle($bundle)
            ->setController($controller)
            ->setAction($action)
        ;

        return $this;
    }

    public function setRouter(
        RouterInterface $router
    ) {
        $this->router = $router;
    }
}
