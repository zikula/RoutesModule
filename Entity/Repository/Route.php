<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Entity\Repository;

use Doctrine\ORM\QueryBuilder;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Routing\RouteCollection;
use Zikula\Core\AbstractModule;
use Zikula\RoutesModule\Entity\Repository\Base\Doctrine;
use Zikula\RoutesModule\Entity\Repository\Base\Route as BaseRoute;
use Zikula\RoutesModule\Entity\RouteEntity;
use Zikula\RoutesModule\Util\WorkflowUtil;
use Zikula\RoutesModule\Routing\Util as RoutingUtil;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for route entities.
 */
class Route extends BaseRoute
{
    protected function genericBaseQueryAddOrderBy(QueryBuilder $qb, $orderBy = '')
    {
        if ($orderBy == 'sort asc') {
            $qb->addOrderBy('tbl.group', 'asc');
            $qb->addOrderBy('tbl.sort', 'asc');
            return $qb;
        } else {
            return parent::genericBaseQueryAddOrderBy($qb, $orderBy);
        }
    }

    public function reloadAllRoutes(ContainerInterface $sm = null)
    {
        if (!isset($sm)) {
            $sm = \ServiceUtil::getManager();
        }

        set_time_limit(300);

        $bundles = $sm->get('kernel')->getModules();
        $request = $sm->get('request');
        $dom = \ZLanguage::getModuleDomain('ZikulaRoutesModule');

        // See http://doctrine-orm.readthedocs.org/en/latest/reference/transactions-and-concurrency.html#approach-2-explicitly
        $this->getEntityManager()->beginTransaction(); // suspend auto-commit

        $this->removeAll(false);
        try {
            foreach ($bundles as $bundle) {
                //$this->entityManager->getRepository('ZikulaRoutesModule:RouteEntity')->removeAllOfModule($bundle, false);
                try {
                    $routeCollection = $sm->get('zikularoutesmodule.routing_finder')->find($bundle);
                } catch (\Exception $e) {
                    $message = __f('Error! Routes for %s bundle could not be loaded: %s', array($bundle->getName(), $e->getMessage()), $dom);
                    if (\System::isInstalling()) {
                        \LogUtil::registerError($message);
                    } else {
                        $request->getSession()->getFlashBag()->add('error', $message);
                    }
                    continue;
                }
                $this->addRouteCollection($bundle, $routeCollection);
            }

            $this->getEntityManager()->getConnection()->commit();
        } catch (\Exception $e) {
            $this->getEntityManager()->getConnection()->rollback();
            $this->getEntityManager()->close();
            throw $e;
        }

        if (!\System::isInstalling()) {
            $request->getSession()->getFlashBag()->add('status', __('Done! Routes reloaded.', $dom));
        }
    }

    public function addRouteCollection(AbstractModule $module, RouteCollection $routeCollection)
    {
        $workflowHelper = new WorkflowUtil(\ServiceUtil::getManager(), \ModUtil::getModule('ZikulaRoutesModule'));
        $routingHelper = new RoutingUtil();
        foreach ($routeCollection->all() as $name => $route) {
            $routeEntity = new RouteEntity();
            $routeEntity->setPath($route->getPath());
            $routeEntity->setDefaults($route->getDefaults());
            $routeEntity->setRequirements($route->getRequirements());
            $routeEntity->setOptions($route->getOptions());
            $routeEntity->setHost($route->getHost());
            $routeEntity->setSchemes($route->getSchemes());
            $routeEntity->setMethods($route->getMethods());
            $routeEntity->setCondition($route->getCondition());

            if ($route->getOption('zkDescription') !== null) {
                $routeEntity->setDescription($route->getOption('zkDescription'));
            }

            $routeEntity->setWorkflowState('approved');
            $routeEntity->setUserRoute(false);

            $position = $route->getOption('zkPosition');
            switch ($position) {
                case 'top':
                    $routeEntity->setGroup(RouteEntity::POSITION_FIXED_TOP);
                    break;
                case 'bottom':
                    $routeEntity->setGroup(RouteEntity::POSITION_FIXED_BOTTOM);
                    break;
                case null:
                    $routeEntity->setGroup(RouteEntity::POSITION_MIDDLE);
                    break;
                default:
                    $dom = \ZLanguage::getModuleDomain('ZikulaRoutesModule');
                    throw new \RuntimeException(__f('Route option "zkPosition" must either be null, "top", or "bottom" for route %s', array($route->getPath()), $dom));
                    break;
            }

            $modname = $module->getName();
            list (, $type, $func, $numericSuffix) = $routingHelper->getParametersFromRouteName($name);

            $routeEntity->setBundle($modname);
            $routeEntity->setController($type);
            $routeEntity->setAction($func);

            $routeEntity->setName(strtolower($modname . "_$type" . "_$func" . $numericSuffix));

            $workflowHelper->executeAction($routeEntity, 'submit');
        }
    }

    public function removeAll($userRoutes = false)
    {
        $routes = $this->findBy(array('userRoute' => $userRoutes));

        if (empty($routes)) {
            return;
        }
        $workflowHelper = new WorkflowUtil(\ServiceUtil::getManager(), \ModUtil::getModule('ZikulaRoutesModule'));
        foreach ($routes as $routeEntity) {
            $workflowHelper->executeAction($routeEntity, 'delete');
        }
    }

    /**
     * @param AbstractModule $module
     * @param bool $userRoutes
     * @return bool
     */
    public function removeAllOfModule(AbstractModule $module, $userRoutes = false)
    {
        $routes = $this->findBy(array('userRoute' => $userRoutes, 'bundle' => $module->getName()));

        if (empty($routes)) {
            return false;
        }
        $workflowHelper = new WorkflowUtil(\ServiceUtil::getManager(), \ModUtil::getModule('ZikulaRoutesModule'));
        foreach ($routes as $routeEntity) {
            $workflowHelper->executeAction($routeEntity, 'delete');
        }
        return true;
    }
}
