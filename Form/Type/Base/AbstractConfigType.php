<?php

/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\RoutesModule\Form\Type\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\RoutesModule\AppSettings;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    use TranslatorTrait;

    public function __construct(
        TranslatorInterface $translator
    ) {
        $this->setTranslator($translator);
    }

    public function setTranslator(TranslatorInterface $translator): void
    {
        $this->translator = $translator;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addListViewsFields($builder, $options);
        $this->addModerationFields($builder, $options);

        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds fields for list views fields.
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $builder->add('routeEntriesPerPage', IntegerType::class, [
            'label' => $this->trans('Route entries per page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->trans('The amount of routes shown per page')
            ],
            'help' => $this->trans('The amount of routes shown per page'),
            'empty_data' => 10,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->trans('Enter the route entries per page.') . ' ' . $this->trans('Only digits are allowed.')
            ],
            'required' => true,
        ]);
        
        $builder->add('showOnlyOwnEntries', CheckboxType::class, [
            'label' => $this->trans('Show only own entries') . ':',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => $this->trans('Whether only own entries should be shown on view pages by default or not')
            ],
            'help' => $this->trans('Whether only own entries should be shown on view pages by default or not'),
            'attr' => [
                'class' => '',
                'title' => $this->trans('The show only own entries option')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for moderation fields.
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $builder->add('allowModerationSpecificCreatorForRoute', CheckboxType::class, [
            'label' => $this->trans('Allow moderation specific creator for route') . ':',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => $this->trans('Whether to allow moderators choosing a user which will be set as creator.')
            ],
            'help' => $this->trans('Whether to allow moderators choosing a user which will be set as creator.'),
            'attr' => [
                'class' => '',
                'title' => $this->trans('The allow moderation specific creator for route option')
            ],
            'required' => false,
        ]);
        
        $builder->add('allowModerationSpecificCreationDateForRoute', CheckboxType::class, [
            'label' => $this->trans('Allow moderation specific creation date for route') . ':',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => $this->trans('Whether to allow moderators choosing a custom creation date.')
            ],
            'help' => $this->trans('Whether to allow moderators choosing a custom creation date.'),
            'attr' => [
                'class' => '',
                'title' => $this->trans('The allow moderation specific creation date for route option')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds submit buttons.
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('save', SubmitType::class, [
            'label' => $this->trans('Update configuration'),
            'icon' => 'fa-check',
            'attr' => [
                'class' => 'btn btn-success'
            ]
        ]);
        $builder->add('reset', ResetType::class, [
            'label' => $this->trans('Reset'),
            'icon' => 'fa-sync',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => $this->trans('Cancel'),
            'validate' => false,
            'icon' => 'fa-times',
            'attr' => [
                'class' => 'btn btn-default'
            ]
        ]);
    }

    public function getBlockPrefix()
    {
        return 'zikularoutesmodule_config';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data
                'data_class' => AppSettings::class,
            ]);
    }
}
